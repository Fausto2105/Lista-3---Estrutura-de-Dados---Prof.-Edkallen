/*
** Função : Implementação do algoritmo quicksort para classificar um vetor em ordem crescente
** Autor : [Seu Nome]
** Data : [Data de hoje]
** Observações: O programa implementa o algoritmo quicksort para classificar um vetor em ordem crescente.
*/

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void trocar(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

int particionar(int vetor[], int inicio, int fim) {
    int pivo = vetor[fim];
    int i = (inicio - 1); 

    for (int j = inicio; j <= fim - 1; j++) {
        if (vetor[j] <= pivo) {
            i++; 
            trocar(&vetor[i], &vetor[j]);
        }
    }
    trocar(&vetor[i + 1], &vetor[fim]);
    return (i + 1);
}

void quicksort(int vetor[], int inicio, int fim) {
    if (inicio < fim) {
        int indice_pivo = particionar(vetor, inicio, fim);

        quicksort(vetor, inicio, indice_pivo - 1);
        quicksort(vetor, indice_pivo + 1, fim);
    }
}

void exibir_vetor(int vetor[], int tamanho) {
    for (int i = 0; i < tamanho; i++) {
        printf("%d ", vetor[i]);
    }
    printf("\n");
}

int main() {
    srand(time(NULL)); 

    int tamanho;
    printf("Digite o tamanho do vetor: ");
    scanf("%d", &tamanho);

    int vetor[tamanho];
    printf("Vetor original: ");
    for (int i = 0; i < tamanho; i++) {
        vetor[i] = rand() % 100; 
        printf("%d ", vetor[i]);
    }
    printf("\n");

    quicksort(vetor, 0, tamanho - 1);

    printf("Vetor classificado: ");
    exibir_vetor(vetor, tamanho);

    return 0;
}
